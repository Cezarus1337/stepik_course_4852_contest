import numpy  as np
import pandas as pd

import libs.config as conf


def load_calc_ft_features():
    steps_matrix_train = pd.read_csv(f'{conf.PROCESSED_DATA_DIR}/step_features_train_ft3.csv.zip',
                                     compression='zip')
    steps_matrix_train = steps_matrix_train[get_importance_features_ft()]
    steps_matrix_submit = pd.read_csv(f'{conf.PROCESSED_DATA_DIR}/step_features_submit_ft3.csv.zip',
                                      compression='zip')
    steps_matrix_submit = steps_matrix_submit[get_importance_features_ft()]
    steps_matrix = pd.concat([steps_matrix_train, steps_matrix_submit])
    steps_matrix = steps_matrix.select_dtypes(exclude='object')
    steps_matrix = steps_matrix.fillna(-1)
    bool2int(steps_matrix)
    steps_matrix = steps_matrix.set_index('user_id')
    return steps_matrix


def bool2int(data):
    bool_cols = data.select_dtypes('bool')
    for col in bool_cols:
        data[col] = np.where(data[col], 1, 0)


def get_importance_features_ft():
    return np.array(['user_id', 'AVG_TIME_BETWEEN(events.date WHERE action = correct)',
                     'AVG_TIME_BETWEEN(events.date WHERE action = passed)',
                     'AVG_TIME_BETWEEN(events.date WHERE action = started_attempt)',
                     'AVG_TIME_BETWEEN(events.date WHERE steps.step_block.name = choice)',
                     'AVG_TIME_BETWEEN(events.date WHERE steps.step_block.name = text)',
                     'COUNT(events WHERE action = correct)',
                     'COUNT(events WHERE action = discovered)',
                     'COUNT(events WHERE action = passed)',
                     'COUNT(events WHERE action = started_attempt)',
                     'COUNT(events WHERE action = viewed)',
                     'COUNT(events WHERE steps.step_block.name = choice)',
                     'COUNT(events WHERE steps.step_block.name = code)',
                     'COUNT(events WHERE steps.step_block.name = text)',
                     'COUNT(events)',
                     'LAST(events.steps.AVG_TIME_BETWEEN(events.date))',
                     'LAST(events.steps.COUNT(events))',
                     'LAST(events.steps.NUM_UNIQUE(events.user_id))',
                     'LAST(events.steps.TIME_SINCE_FIRST(events.date))',
                     'MAX(events.steps.AVG_TIME_BETWEEN(events.date))',
                     'MAX(events.steps.COUNT(events))',
                     'MAX(events.steps.NUM_UNIQUE(events.user_id))',
                     'MAX(events.steps.TIME_SINCE_FIRST(events.date))',
                     'MAX(events.steps.lessons.lesson_discussions_count)',
                     'MAX(events.steps.lessons.lesson_viewed_by)',
                     'MAX(events.steps.step_block.video.duration)',
                     'MAX(events.steps.step_correct_ratio)',
                     'MAX(events.steps.step_passed_by)',
                     'MAX(events.steps.step_viewed_by)',
                     'MEAN(events.DAYS_SINCE(date) WHERE action = correct)',
                     'MEAN(events.DAYS_SINCE(date) WHERE action = discovered)',
                     'MEAN(events.DAYS_SINCE(date) WHERE action = passed)',
                     'MEAN(events.DAYS_SINCE(date) WHERE action = viewed)',
                     'MEAN(events.DAYS_SINCE(date) WHERE steps.step_block.name = text)',
                     'MEAN(events.DAYS_SINCE(date))',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date) WHERE action = correct)',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date) WHERE action = discovered)',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date) WHERE action = passed)',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date) WHERE action = started_attempt)',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date) WHERE action = viewed)',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date) WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date) WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.AVG_TIME_BETWEEN(events.date))',
                     'MEAN(events.steps.COUNT(events) WHERE action = correct)',
                     'MEAN(events.steps.COUNT(events) WHERE action = discovered)',
                     'MEAN(events.steps.COUNT(events) WHERE action = passed)',
                     'MEAN(events.steps.COUNT(events) WHERE action = started_attempt)',
                     'MEAN(events.steps.COUNT(events) WHERE action = viewed)',
                     'MEAN(events.steps.COUNT(events) WHERE action = wrong)',
                     'MEAN(events.steps.COUNT(events) WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.COUNT(events) WHERE steps.step_block.name = code)',
                     'MEAN(events.steps.COUNT(events) WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.COUNT(events) WHERE steps.step_block.name = video)',
                     'MEAN(events.steps.COUNT(events))',
                     'MEAN(events.steps.NUM_UNIQUE(events.action) WHERE action = correct)',
                     'MEAN(events.steps.NUM_UNIQUE(events.action) WHERE action = passed)',
                     'MEAN(events.steps.NUM_UNIQUE(events.action) WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE action = correct)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE action = discovered)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE action = passed)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE action = started_attempt)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE action = viewed)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE action = wrong)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id) WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.NUM_UNIQUE(events.user_id))',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE action = correct)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE action = discovered)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE action = passed)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE action = started_attempt)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE action = viewed)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE action = wrong)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date) WHERE steps.step_block.name = video)',
                     'MEAN(events.steps.TIME_SINCE_FIRST(events.date))',
                     'MEAN(events.steps.TIME_SINCE_LAST(events.date) WHERE action = correct)',
                     'MEAN(events.steps.TIME_SINCE_LAST(events.date) WHERE action = passed)',
                     'MEAN(events.steps.TIME_SINCE_LAST(events.date) WHERE action = wrong)',
                     'MEAN(events.steps.TIME_SINCE_LAST(events.date) WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.lessons.lesson_abuse_count WHERE action = correct)',
                     'MEAN(events.steps.lessons.lesson_abuse_count WHERE action = passed)',
                     'MEAN(events.steps.lessons.lesson_abuse_count WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.lessons.lesson_abuse_count WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE action = correct)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE action = discovered)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE action = passed)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE action = started_attempt)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE action = viewed)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE action = wrong)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE steps.step_block.name = code)',
                     'MEAN(events.steps.lessons.lesson_discussions_count WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.lessons.lesson_discussions_count)',
                     'MEAN(events.steps.lessons.lesson_epic_count WHERE action = correct)',
                     'MEAN(events.steps.lessons.lesson_epic_count WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.lessons.lesson_epic_count WHERE steps.step_block.name = code)',
                     'MEAN(events.steps.lessons.lesson_epic_count WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.lessons.lesson_passed_by WHERE action = correct)',
                     'MEAN(events.steps.lessons.lesson_passed_by WHERE action = discovered)',
                     'MEAN(events.steps.lessons.lesson_passed_by WHERE action = passed)',
                     'MEAN(events.steps.lessons.lesson_passed_by WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.lessons.lesson_passed_by WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.lessons.lesson_time_to_complete WHERE action = correct)',
                     'MEAN(events.steps.lessons.lesson_time_to_complete WHERE action = discovered)',
                     'MEAN(events.steps.lessons.lesson_time_to_complete WHERE action = passed)',
                     'MEAN(events.steps.lessons.lesson_time_to_complete WHERE action = started_attempt)',
                     'MEAN(events.steps.lessons.lesson_time_to_complete WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.lessons.lesson_time_to_complete WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.lessons.lesson_time_to_complete)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE action = correct)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE action = discovered)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE action = passed)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE action = started_attempt)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE action = viewed)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE action = wrong)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.lessons.lesson_viewed_by WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.lessons.lesson_vote_delta WHERE action = correct)',
                     'MEAN(events.steps.lessons.lesson_vote_delta WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_block.options.code_templates_header_lines_count.r WHERE action = correct)',
                     'MEAN(events.steps.step_block.options.code_templates_header_lines_count.r WHERE action = passed)',
                     'MEAN(events.steps.step_block.options.execution_memory_limit WHERE action = correct)',
                     'MEAN(events.steps.step_block.options.execution_memory_limit WHERE action = passed)',
                     'MEAN(events.steps.step_block.options.execution_time_limit WHERE action = correct)',
                     'MEAN(events.steps.step_block.options.limits.r.memory WHERE action = correct)',
                     'MEAN(events.steps.step_block.options.limits.r.memory WHERE action = passed)',
                     'MEAN(events.steps.step_block.options.limits.r.time WHERE action = correct)',
                     'MEAN(events.steps.step_block.options.limits.r.time WHERE action = discovered)',
                     'MEAN(events.steps.step_block.options.limits.r.time WHERE action = passed)',
                     'MEAN(events.steps.step_block.options.limits.r.time WHERE action = started_attempt)',
                     'MEAN(events.steps.step_block.options.limits.r.time WHERE action = viewed)',
                     'MEAN(events.steps.step_block.video.duration WHERE steps.step_block.name = video)',
                     'MEAN(events.steps.step_block.video.duration)',
                     'MEAN(events.steps.step_correct_ratio WHERE action = correct)',
                     'MEAN(events.steps.step_correct_ratio WHERE action = discovered)',
                     'MEAN(events.steps.step_correct_ratio WHERE action = passed)',
                     'MEAN(events.steps.step_correct_ratio WHERE action = started_attempt)',
                     'MEAN(events.steps.step_correct_ratio WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.step_correct_ratio WHERE steps.step_block.name = code)',
                     'MEAN(events.steps.step_correct_ratio)',
                     'MEAN(events.steps.step_discussions_count WHERE action = correct)',
                     'MEAN(events.steps.step_discussions_count WHERE action = discovered)',
                     'MEAN(events.steps.step_discussions_count WHERE action = passed)',
                     'MEAN(events.steps.step_discussions_count WHERE action = started_attempt)',
                     'MEAN(events.steps.step_discussions_count WHERE action = viewed)',
                     'MEAN(events.steps.step_discussions_count WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.step_discussions_count WHERE steps.step_block.name = code)',
                     'MEAN(events.steps.step_discussions_count WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_discussions_count)',
                     'MEAN(events.steps.step_max_submissions_count WHERE action = correct)',
                     'MEAN(events.steps.step_max_submissions_count WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_passed_by WHERE action = correct)',
                     'MEAN(events.steps.step_passed_by WHERE action = discovered)',
                     'MEAN(events.steps.step_passed_by WHERE action = passed)',
                     'MEAN(events.steps.step_passed_by WHERE action = started_attempt)',
                     'MEAN(events.steps.step_passed_by WHERE action = viewed)',
                     'MEAN(events.steps.step_passed_by WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.step_passed_by WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_passed_by)',
                     'MEAN(events.steps.step_solutions_unlocked_attempts WHERE action = correct)',
                     'MEAN(events.steps.step_solutions_unlocked_attempts WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_variation WHERE action = correct)',
                     'MEAN(events.steps.step_variation WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_variations_count WHERE action = correct)',
                     'MEAN(events.steps.step_variations_count WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_viewed_by WHERE action = correct)',
                     'MEAN(events.steps.step_viewed_by WHERE action = discovered)',
                     'MEAN(events.steps.step_viewed_by WHERE action = passed)',
                     'MEAN(events.steps.step_viewed_by WHERE action = started_attempt)',
                     'MEAN(events.steps.step_viewed_by WHERE action = viewed)',
                     'MEAN(events.steps.step_viewed_by WHERE steps.step_block.name = choice)',
                     'MEAN(events.steps.step_viewed_by WHERE steps.step_block.name = text)',
                     'MEAN(events.steps.step_viewed_by)',
                     'MEAN(events.time_since_previous_by_step_id WHERE action = correct)',
                     'MEAN(events.time_since_previous_by_step_id WHERE action = passed)',
                     'MEAN(events.time_since_previous_by_step_id WHERE action = started_attempt)',
                     'MEAN(events.time_since_previous_by_step_id WHERE steps.step_block.name = choice)',
                     'MEAN(events.time_since_previous_by_step_id WHERE steps.step_block.name = text)',
                     'MEAN(events.time_since_previous_by_user_id WHERE action = correct)',
                     'MEAN(events.time_since_previous_by_user_id WHERE action = passed)',
                     'MEAN(events.time_since_previous_by_user_id WHERE action = started_attempt)',
                     'MEAN(events.time_since_previous_by_user_id WHERE steps.step_block.name = choice)',
                     'MEAN(events.time_since_previous_by_user_id WHERE steps.step_block.name = text)',
                     'MEDIAN(events.steps.AVG_TIME_BETWEEN(events.date))',
                     'MEDIAN(events.steps.COUNT(events))',
                     'MEDIAN(events.steps.NUM_UNIQUE(events.user_id))',
                     'MEDIAN(events.steps.TIME_SINCE_FIRST(events.date))',
                     'MEDIAN(events.steps.TIME_SINCE_LAST(events.date))',
                     'MEDIAN(events.steps.step_correct_ratio)',
                     'MEDIAN(events.steps.step_passed_by)',
                     'MEDIAN(events.steps.step_viewed_by)',
                     'MIN(events.steps.AVG_TIME_BETWEEN(events.date))',
                     'MIN(events.steps.COUNT(events))',
                     'MIN(events.steps.NUM_UNIQUE(events.user_id))',
                     'MIN(events.steps.TIME_SINCE_FIRST(events.date))',
                     'MIN(events.steps.lessons.lesson_passed_by)',
                     'MIN(events.steps.lessons.lesson_time_to_complete)',
                     'MIN(events.steps.step_correct_ratio)',
                     'MODE(events.steps.MODE(events.user_id))',
                     'MODE(events.steps.step_position)', 'NUM_UNIQUE(events.action)',
                     'NUM_UNIQUE(events.step_id)',
                     'NUM_UNIQUE(events.steps.LAST(events.user_id))',
                     'NUM_UNIQUE(events.steps.assignment_id)',
                     'NUM_UNIQUE(events.steps.step_block.options.is_multiple_choice)',
                     'NUM_UNIQUE(events.steps.step_position)',
                     'NUM_UNIQUE(events.steps.unit_id)',
                     'PERCENT_TRUE(events.steps.step_actions.submit_# WHERE action = correct)',
                     'PERCENT_TRUE(events.steps.step_actions.submit_# WHERE action = passed)',
                     'PERCENT_TRUE(events.steps.step_worth WHERE action = correct)',
                     'PERCENT_TRUE(events.steps.step_worth WHERE action = passed)',
                     'PERCENT_TRUE(events.steps.step_worth)',
                     'SKEW(events.DAYS_SINCE(date))',
                     'SKEW(events.steps.COUNT(events))',
                     'SKEW(events.steps.lessons.lesson_discussions_count)',
                     'SKEW(events.steps.lessons.lesson_time_to_complete)',
                     'SKEW(events.steps.step_block.options.code_templates_header_lines_count.r)',
                     'SKEW(events.steps.step_block.options.limits.r.time)',
                     'SKEW(events.steps.step_discussions_count)',
                     'STD(events.DAYS_SINCE(date))',
                     'STD(events.steps.AVG_TIME_BETWEEN(events.date))',
                     'STD(events.steps.COUNT(events))',
                     'STD(events.steps.NUM_UNIQUE(events.user_id))',
                     'STD(events.steps.lessons.lesson_discussions_count)',
                     'STD(events.steps.lessons.lesson_epic_count)',
                     'STD(events.steps.lessons.lesson_passed_by)',
                     'STD(events.steps.lessons.lesson_time_to_complete)',
                     'STD(events.steps.lessons.lesson_viewed_by)',
                     'STD(events.steps.step_block.options.limits.r.time)',
                     'STD(events.steps.step_block.video.duration)',
                     'STD(events.steps.step_correct_ratio)',
                     'STD(events.steps.step_discussions_count)',
                     'STD(events.steps.step_passed_by)',
                     'STD(events.steps.step_viewed_by)',
                     'SUM(events.steps.AVG_TIME_BETWEEN(events.date))',
                     'SUM(events.steps.COUNT(events))',
                     'SUM(events.steps.NUM_UNIQUE(events.action))',
                     'SUM(events.steps.NUM_UNIQUE(events.user_id))',
                     'SUM(events.steps.TIME_SINCE_FIRST(events.date))',
                     'SUM(events.steps.lessons.lesson_abuse_count)',
                     'SUM(events.steps.lessons.lesson_discussions_count)',
                     'SUM(events.steps.lessons.lesson_epic_count)',
                     'SUM(events.steps.lessons.lesson_passed_by)',
                     'SUM(events.steps.lessons.lesson_time_to_complete)',
                     'SUM(events.steps.lessons.lesson_viewed_by)',
                     'SUM(events.steps.lessons.lesson_vote_delta)',
                     'SUM(events.steps.step_block.options.code_templates_header_lines_count.r)',
                     'SUM(events.steps.step_block.options.execution_memory_limit)',
                     'SUM(events.steps.step_block.options.execution_time_limit)',
                     'SUM(events.steps.step_block.options.limits.r.memory)',
                     'SUM(events.steps.step_block.options.limits.r.time)',
                     'SUM(events.steps.step_block.video.duration)',
                     'SUM(events.steps.step_correct_ratio)',
                     'SUM(events.steps.step_discussions_count)',
                     'SUM(events.steps.step_max_submissions_count)',
                     'SUM(events.steps.step_passed_by)',
                     'SUM(events.steps.step_solutions_unlocked_attempts)',
                     'SUM(events.steps.step_variation)',
                     'SUM(events.steps.step_variations_count)',
                     'SUM(events.steps.step_viewed_by)',
                     'SUM(events.time_since_previous_by_user_id)',
                     'TIME_SINCE_FIRST(events.date WHERE action = correct)',
                     'TIME_SINCE_FIRST(events.date WHERE steps.step_block.name = text)',
                     'TIME_SINCE_LAST(events.date WHERE action = correct)',
                     'TIME_SINCE_LAST(events.date WHERE action = discovered)',
                     'TIME_SINCE_LAST(events.date WHERE action = passed)',
                     'TIME_SINCE_LAST(events.date WHERE action = viewed)',
                     'TIME_SINCE_LAST(events.date WHERE steps.step_block.name = text)',
                     'TIME_SINCE_LAST(events.date)',
                     'TREND(events.DAYS_SINCE(date), date WHERE action = correct)',
                     'TREND(events.DAYS_SINCE(date), date WHERE steps.step_block.name = choice)',
                     'TREND(events.DAYS_SINCE(date), date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.AVG_TIME_BETWEEN(events.date), date WHERE action = correct)',
                     'TREND(events.steps.AVG_TIME_BETWEEN(events.date), date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.AVG_TIME_BETWEEN(events.date), date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.COUNT(events), date WHERE action = correct)',
                     'TREND(events.steps.COUNT(events), date WHERE action = started_attempt)',
                     'TREND(events.steps.COUNT(events), date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.COUNT(events), date WHERE steps.step_block.name = code)',
                     'TREND(events.steps.COUNT(events), date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.NUM_UNIQUE(events.action), date WHERE action = correct)',
                     'TREND(events.steps.NUM_UNIQUE(events.action), date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.NUM_UNIQUE(events.user_id), date WHERE action = correct)',
                     'TREND(events.steps.NUM_UNIQUE(events.user_id), date WHERE action = passed)',
                     'TREND(events.steps.NUM_UNIQUE(events.user_id), date WHERE action = started_attempt)',
                     'TREND(events.steps.NUM_UNIQUE(events.user_id), date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.TIME_SINCE_LAST(events.date), date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_abuse_count, date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_abuse_count, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.lessons.lesson_discussions_count, date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_discussions_count, date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.lessons.lesson_discussions_count, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.lessons.lesson_epic_count, date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_epic_count, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.lessons.lesson_passed_by, date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_passed_by, date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.lessons.lesson_passed_by, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.lessons.lesson_time_to_complete, date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_time_to_complete, date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.lessons.lesson_time_to_complete, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.lessons.lesson_viewed_by, date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_vote_delta, date WHERE action = correct)',
                     'TREND(events.steps.lessons.lesson_vote_delta, date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.lessons.lesson_vote_delta, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_block.options.code_templates_header_lines_count.r, date WHERE action = correct)',
                     'TREND(events.steps.step_block.options.code_templates_header_lines_count.r, date WHERE action = passed)',
                     'TREND(events.steps.step_block.options.code_templates_header_lines_count.r, date WHERE action = started_attempt)',
                     'TREND(events.steps.step_block.options.execution_memory_limit, date WHERE action = correct)',
                     'TREND(events.steps.step_block.options.execution_memory_limit, date WHERE action = passed)',
                     'TREND(events.steps.step_block.options.execution_time_limit, date WHERE action = correct)',
                     'TREND(events.steps.step_block.options.execution_time_limit, date WHERE action = passed)',
                     'TREND(events.steps.step_block.options.limits.r.memory, date WHERE action = correct)',
                     'TREND(events.steps.step_block.options.limits.r.memory, date WHERE action = passed)',
                     'TREND(events.steps.step_block.options.limits.r.time, date WHERE action = correct)',
                     'TREND(events.steps.step_block.options.limits.r.time, date WHERE action = passed)',
                     'TREND(events.steps.step_block.options.limits.r.time, date WHERE action = started_attempt)',
                     'TREND(events.steps.step_correct_ratio, date WHERE action = correct)',
                     'TREND(events.steps.step_correct_ratio, date WHERE action = passed)',
                     'TREND(events.steps.step_correct_ratio, date WHERE action = started_attempt)',
                     'TREND(events.steps.step_correct_ratio, date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.step_discussions_count, date WHERE action = correct)',
                     'TREND(events.steps.step_discussions_count, date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.step_discussions_count, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_max_submissions_count, date WHERE action = correct)',
                     'TREND(events.steps.step_max_submissions_count, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_passed_by, date WHERE action = correct)',
                     'TREND(events.steps.step_passed_by, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_passed_by, date)',
                     'TREND(events.steps.step_solutions_unlocked_attempts, date WHERE action = correct)',
                     'TREND(events.steps.step_solutions_unlocked_attempts, date WHERE steps.step_block.name = choice)',
                     'TREND(events.steps.step_solutions_unlocked_attempts, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_variation, date WHERE action = correct)',
                     'TREND(events.steps.step_variation, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_variations_count, date WHERE action = correct)',
                     'TREND(events.steps.step_variations_count, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_viewed_by, date WHERE action = correct)',
                     'TREND(events.steps.step_viewed_by, date WHERE action = discovered)',
                     'TREND(events.steps.step_viewed_by, date WHERE steps.step_block.name = text)',
                     'TREND(events.steps.step_viewed_by, date)',
                     'TREND(events.time_since_previous_by_step_id, date WHERE action = correct)',
                     'TREND(events.time_since_previous_by_step_id, date WHERE steps.step_block.name = choice)',
                     'TREND(events.time_since_previous_by_step_id, date WHERE steps.step_block.name = text)',
                     'TREND(events.time_since_previous_by_user_id, date WHERE action = correct)',
                     'TREND(events.time_since_previous_by_user_id, date WHERE steps.step_block.name = choice)',
                     'TREND(events.time_since_previous_by_user_id, date WHERE steps.step_block.name = text)'])
